{"version":3,"sources":["angular-block-ui-header.js","angular-block-ui.js","block-navigation.js","block-ui-container-directive.js","block-ui-directive.js","config.js","interceptor.js","service.js","utils.js","angular-block-ui-templates.js","angular-block-ui-footer.js"],"names":[],"mappings":"AAAA;GACA;GACA;GACA;AACA;AACA;;ACLA;;AAEA,aAAA,8BAAA;;EAEA,oBAAA,iBAAA;IACA;MACA;;MAEA;;QAEA;;QAEA;UACA;YACA;YACA;UACA;YACA;UACA;QACA;;QAEA;MACA;IACA;EACA;;EAEA,iCAAA,sBAAA;AACA,CAAA,CAAA;;AAEA,UAAA,iDAAA;EACA;IACA;EACA;;EAEA;;IAEA;IACA;;IAEA;IACA;EACA;AACA,CAAA,CAAA;;AAEA;EACA;IACA;EACA;IACA;EACA;EACA;AACA;ACnDA,aAAA,aAAA;EACA,oBAAA,SAAA;AACA,CAAA,CAAA;;AAEA;EACA;EACA;;IAEA;;MAEA;;MAEA;;MAEA;QACA;QACA;;UAEA;;UAEA;;UAEA;;UAEA;;YAEA;;YAEA;UACA;;UAEA;QACA;MACA;;MAEA;;IAEA;;IAEA;AACA;;AAEA;;AAEA;;EAEA;;IAEA;;MAEA;;QAEA;;QAEA;UACA;QACA;MACA;;MAEA;QACA;;QAEA;MACA;IACA;;IAEA;;MAEA;MACA;;MAEA;;QAEA;QACA;;QAEA;QACA;;MAEA;;IAEA;MACA;IACA;;EAEA;AACA;ACtFA,iBAAA,gBAAA,GAAA,4CAAA;EACA;IACA;IACA;IACA;IACA;MACA;IACA;EACA;AACA,CAAA,CAAA,WAAA,sBAAA,GAAA,4BAAA;;EAEA;;IAEA;;IAEA;MACA;IACA;;IAEA;;IAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;AACA,CAAA,CAAA;AC/BA,iBAAA,OAAA,GAAA,qBAAA;;EAEA;IACA;IACA;IACA;EACA;;AAEA,CAAA,CAAA,WAAA,gBAAA,GAAA,qBAAA;;EAEA;;IAEA;;IAEA;;IAEA;MACA;IACA;;EAEA;;AAEA,CAAA,CAAA,WAAA,gBAAA,GAAA,6CAAA;;EAEA;;IAEA;IACA;;IAEA;MACA;IACA;;IAEA;;IAEA;MACA;IACA;;IAEA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;;IAEA;MACA;IACA;MACA;MACA;;MAEA;QACA;QACA;MACA;IACA;;IAEA;;IAEA;MACA;IACA;;IAEA;;IAEA;;IAEA;;IAEA;;IAEA;MACA;MACA;MACA;IACA;;IAEA;MACA;IACA;;IAEA;;IAEA;;IAEA;MACA;MACA;IACA;;IAEA;;IAEA;;EAEA;;AAEA,CAAA,CAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtHA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;;;ACVA,eAAA,sBAAA,GAAA,uDAAA;;EAEA;;EAEA;IACA;EACA;;EAEA;IACA;MACA;MACA;IACA;EACA;;EAEA;;IAEA;MACA;IACA;MACA;IACA;;IAEA;EACA;;EAEA;IACA;;MAEA;MACA;;MAEA;QACA;;QAEA;;QAEA;;QAEA;UACA;UACA;QACA;;UAEA;;UAEA;UACA;QACA;MACA;;MAEA;IACA;;IAEA;;IAEA;;MAEA;MACA;;MAEA;QACA;MACA;;MAEA;IACA;;IAEA;EACA;;AAEA,CAAA,CAAA;;ACvEA,eAAA,OAAA,GAAA,2DAAA;;EAEA;;EAEA;;IAEA;;IAEA;MACA;MACA;MACA;MACA;MACA;IACA;;IAEA;;IAEA;;IAEA;;MAEA;QACA;MACA;QACA;MACA;;MAEA;MACA;MACA;;MAEA;;MAEA;;MAEA;;QAEA;QACA;;QAEA;;QAEA;QACA;QACA;;QAEA;UACA;UACA;YACA;UACA;QACA;MACA;;MAEA;QACA;UACA;UACA;QACA;MACA;IACA;;IAEA;MACA;QACA;QACA;MACA;IACA;;IAEA;MACA;;MAEA;QACA;MACA;IACA;;IAEA;QACA;IACA;;IAEA;MACA;IACA;;IAEA;MACA;QACA;MACA;;MAEA;IACA;;IAEA;;MAEA;MACA;MACA;;MAEA;MACA;MACA;;MAEA;SACA;QACA;QACA;MACA;;MAEA;QACA;UACA;YACA;UACA;QACA;MACA;QACA;MACA;IACA;;IAEA;MACA;IACA;;IAEA;MACA;IACA;;IAEA;MACA;IACA;;IAEA;MACA;QACA;MACA;IACA;EACA;;EAEA;;EAEA;;IAEA;MACA;IACA;;IAEA;;IAEA;MACA;MACA;MACA;IACA;;IAEA;EACA;;EAEA;IACA;MACA;IACA;;IAEA;MACA;;MAEA;MACA;;MAEA;IACA;EACA;;EAEA;;IAEA;;IAEA;IACA;;IAEA;IACA;;IAEA;;IAEA;MACA;MACA;;MAEA;QACA;MACA;IACA;;IAEA;MACA;IACA;;IAEA;EACA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;;EAEA;AACA,CAAA,CAAA;;;ACnNA,eAAA,YAAA;;EAEA;;EAEA;IACA;MACA;;MAEA;QACA;MACA;QACA;MACA;;MAEA;IACA;IACA;MACA;MACA;QACA;QACA;MACA;IACA;IACA;MACA;QACA;MACA;IACA;IACA;MACA;;MAEA;QACA;UACA;QACA;;QAEA;MACA;;MAEA;IACA;IACA;MACA;;MAEA;QACA;MACA;;QAEA;;QAEA;UACA;QACA;UACA;QACA;;QAEA;QACA;UACA;QACA;MACA;;MAEA;IACA;IACA;AACA;AACA;AACA;;MAEA;QACA;UACA;QACA;MACA;;MAEA;IACA;EACA;;EAEA;;AAEA;AClFA;AACA;AACA;AACA;EACA;AACA;ACLA","file":"angular-block-ui.js","sourcesContent":["/*!\n   angular-block-ui v0.2.0\n   (c) 2015 (null) McNull https://github.com/McNull/angular-block-ui\n   License: MIT\n*/\n(function(angular) {\n","var blkUI = angular.module('blockUI', []);\r\n\r\nblkUI.config(function ($provide, $httpProvider) {\r\n\r\n  $provide.decorator('$exceptionHandler', ['$delegate', '$injector',\r\n    function ($delegate, $injector) {\r\n      var blockUI, blockUIConfig;\r\n\r\n      return function (exception, cause) {\r\n\r\n        blockUIConfig = blockUIConfig || $injector.get('blockUIConfig');\r\n\r\n        if (blockUIConfig.resetOnException) {\r\n          try {\r\n            blockUI = blockUI || $injector.get('blockUI');\r\n            blockUI.instances.reset();\r\n          } catch (ex) {\r\n            console.log('$exceptionHandler', exception);\r\n          }\r\n        }\r\n\r\n        $delegate(exception, cause);\r\n      };\r\n    }\r\n  ]);\r\n\r\n  $httpProvider.interceptors.push('blockUIHttpInterceptor');\r\n});\r\n\r\nblkUI.run(function ($document, blockUIConfig, $templateCache) {\r\n  if (blockUIConfig.autoInjectBodyBlock) {\r\n    $document.find('body').attr('block-ui', 'main');\r\n  }\r\n\r\n  if (blockUIConfig.template) {\r\n\r\n    // Swap the builtin template with the custom template.\r\n    // Create a magic cache key and place the template in the cache.\r\n\r\n    blockUIConfig.templateUrl = '$$block-ui-template$$';\r\n    $templateCache.put(blockUIConfig.templateUrl, blockUIConfig.template);\r\n  }\r\n});\r\n\r\nfunction moduleLoaded(name) {\r\n  try {\r\n    angular.module(name);\r\n  } catch(ex) {\r\n    return false;\r\n  }\r\n  return true;\r\n}","blkUI.config(function ($provide) {\r\n  $provide.decorator('$location', decorateLocation);\r\n});\r\n\r\nvar decorateLocation = [\r\n  '$delegate', 'blockUI', 'blockUIConfig',\r\n  function ($delegate, blockUI, blockUIConfig) {\r\n\r\n    if (blockUIConfig.blockBrowserNavigation) {\r\n\r\n      blockUI.$_blockLocationChange = true;\r\n\r\n      var overrides = ['url', 'path', 'search', 'hash', 'state'];\r\n\r\n      function hook(f) {\r\n        var s = $delegate[f];\r\n        $delegate[f] = function () {\r\n\r\n          //        console.log(f, Date.now(), arguments);\r\n\r\n          var result = s.apply($delegate, arguments);\r\n\r\n          // The call was a setter if the $location service is returned.\r\n\r\n          if (result === $delegate) {\r\n\r\n            // Mark the mainblock ui to allow the location change.\r\n\r\n            blockUI.$_blockLocationChange = false;\r\n          }\r\n\r\n          return result;\r\n        };\r\n      }\r\n\r\n      angular.forEach(overrides, hook);\r\n\r\n    }\r\n\r\n    return $delegate;\r\n}];\r\n\r\n// Called from block-ui-directive for the 'main' instance.\r\n\r\nfunction blockNavigation($scope, mainBlockUI, blockUIConfig) {\r\n\r\n  if (blockUIConfig.blockBrowserNavigation) {\r\n\r\n    function registerLocationChange() {\r\n\r\n      $scope.$on('$locationChangeStart', function (event) {\r\n\r\n        //        console.log('$locationChangeStart', mainBlockUI.$_blockLocationChange + ' ' + mainBlockUI.state().blockCount);\r\n\r\n        if (mainBlockUI.$_blockLocationChange && mainBlockUI.state().blockCount > 0) {\r\n          event.preventDefault();\r\n        }\r\n      });\r\n\r\n      $scope.$on('$locationChangeSuccess', function () {\r\n        mainBlockUI.$_blockLocationChange = blockUIConfig.blockBrowserNavigation;\r\n\r\n        //        console.log('$locationChangeSuccess', mainBlockUI.$_blockLocationChange + ' ' + mainBlockUI.state().blockCount);\r\n      });\r\n    }\r\n\r\n    if (moduleLoaded('ngRoute')) {\r\n\r\n      // After the initial content has been loaded we'll spy on any location\r\n      // changes and discard them when needed.\r\n\r\n      var fn = $scope.$on('$viewContentLoaded', function () {\r\n\r\n        // Unhook the view loaded and hook a function that will prevent\r\n        // location changes while the block is active.\r\n\r\n        fn();\r\n        registerLocationChange();\r\n\r\n      });\r\n\r\n    } else {\r\n      registerLocationChange();\r\n    }\r\n\r\n  }\r\n}","blkUI.directive('blockUiContainer', function (blockUIConfig, blockUiContainerLinkFn) {\r\n  return {\r\n    scope: true,\r\n    restrict: 'A',\r\n    templateUrl: blockUIConfig.templateUrl,\r\n    compile: function($element) {\r\n      return blockUiContainerLinkFn;\r\n    }\r\n  };\r\n}).factory('blockUiContainerLinkFn', function (blockUI, blockUIUtils) {\r\n\r\n  return function ($scope, $element, $attrs) {\r\n\r\n    var srvInstance = $element.inheritedData('block-ui');\r\n\r\n    if (!srvInstance) {\r\n      throw new Error('No parent block-ui service instance located.');\r\n    }\r\n\r\n    // Expose the state on the scope\r\n\r\n    $scope.state = srvInstance.state();\r\n\r\n//    $scope.$watch('state.blocking', function(value) {\r\n//      $element.toggleClass('block-ui-visible', !!value);\r\n//    });\r\n//\r\n//    $scope.$watch('state.blockCount > 0', function(value) {\r\n//      $element.toggleClass('block-ui-active', !!value);\r\n//    });\r\n  };\r\n});","blkUI.directive('blockUi', function (blockUiCompileFn) {\r\n\r\n  return {\r\n    scope: true,\r\n    restrict: 'A',\r\n    compile: blockUiCompileFn\r\n  };\r\n\r\n}).factory('blockUiCompileFn', function (blockUiPreLinkFn) {\r\n\r\n  return function ($element, $attrs) {\r\n\r\n    // Class should be added here to prevent an animation delay error.\r\n\r\n    $element.append('<div block-ui-container class=\"block-ui-container\"></div>');\r\n\r\n    return {\r\n      pre: blockUiPreLinkFn\r\n    };\r\n\r\n  };\r\n\r\n}).factory('blockUiPreLinkFn', function (blockUI, blockUIUtils, blockUIConfig) {\r\n\r\n  return function ($scope, $element, $attrs) {\r\n\r\n    // If the element does not have the class \"block-ui\" set, we set the\r\n    // default css classes from the config.\r\n\r\n    if (!$element.hasClass('block-ui')) {\r\n      $element.addClass(blockUIConfig.cssClass);\r\n    }\r\n\r\n    // Expose the blockUiMessageClass attribute value on the scope\r\n\r\n    $attrs.$observe('blockUiMessageClass', function (value) {\r\n      $scope.$_blockUiMessageClass = value;\r\n    });\r\n\r\n    // Create the blockUI instance\r\n    // Prefix underscore to prevent integers:\r\n    // https://github.com/McNull/angular-block-ui/pull/8\r\n\r\n    var instanceId = $attrs.blockUi || '_' + $scope.$id;\r\n    var srvInstance = blockUI.instances.get(instanceId);\r\n\r\n    // If this is the main (topmost) block element we'll also need to block any\r\n    // location changes while the block is active.\r\n\r\n    if (instanceId === 'main') {\r\n      blockNavigation($scope, srvInstance, blockUIConfig);\r\n    } else {\r\n      // Locate the parent blockUI instance\r\n      var parentInstance = $element.inheritedData('block-ui');\r\n\r\n      if (parentInstance) {\r\n        // TODO: assert if parent is already set to something else\r\n        srvInstance._parent = parentInstance;\r\n      }\r\n    }\r\n\r\n    // Ensure the instance is released when the scope is destroyed\r\n\r\n    $scope.$on('$destroy', function () {\r\n      srvInstance.release();\r\n    });\r\n\r\n    // Increase the reference count\r\n\r\n    srvInstance.addRef();\r\n\r\n    // Expose the state on the scope\r\n\r\n    $scope.$_blockUiState = srvInstance.state();\r\n\r\n    $scope.$watch('$_blockUiState.blocking', function (value) {\r\n      // Set the aria-busy attribute if needed\r\n      $element.attr('aria-busy', !!value);\r\n      $element.toggleClass('block-ui-visible', !!value);\r\n    });\r\n\r\n    $scope.$watch('$_blockUiState.blockCount > 0', function (value) {\r\n      $element.toggleClass('block-ui-active', !!value);\r\n    });\r\n\r\n    // If a pattern is provided assign it to the state\r\n\r\n    var pattern = $attrs.blockUiPattern;\r\n\r\n    if (pattern) {\r\n      var regExp = blockUIUtils.buildRegExp(pattern);\r\n      srvInstance.pattern(regExp);\r\n    }\r\n\r\n    // Store a reference to the service instance on the element\r\n\r\n    $element.data('block-ui', srvInstance);\r\n\r\n  };\r\n\r\n});\r\n//.factory('blockUiPostLinkFn', function(blockUIUtils) {\r\n//\r\n//  return function($scope, $element, $attrs) {\r\n//\r\n//    var $message;\r\n//\r\n//    $attrs.$observe('blockUiMessageClass', function(value) {\r\n//\r\n//      $message = $message || blockUIUtils.findElement($element, function($e) {\r\n//        return $e.hasClass('block-ui-message');\r\n//      });\r\n//\r\n//      $message.addClass(value);\r\n//\r\n//    });\r\n//  };\r\n//\r\n//});","blkUI.constant('blockUIConfig', {\r\n    templateUrl: 'angular-block-ui/angular-block-ui.ng.html',\r\n    delay: 250,\r\n    message: \"Loading ...\",\r\n    autoBlock: true,\r\n    resetOnException: true,\r\n    requestFilter: angular.noop,\r\n    autoInjectBodyBlock: true,\r\n    cssClass: 'block-ui block-ui-anim-fade',\r\n    blockBrowserNavigation: false\r\n});\r\n\r\n","blkUI.factory('blockUIHttpInterceptor', function($q, $injector, blockUIConfig, $templateCache) {\r\n\r\n  var blockUI;\r\n\r\n  function injectBlockUI() {\r\n    blockUI = blockUI || $injector.get('blockUI');\r\n  }\r\n\r\n  function stopBlockUI(config) {\r\n    if (blockUIConfig.autoBlock && (config && !config.$_noBlock && config.$_blocks)) {\r\n      injectBlockUI();\r\n      config.$_blocks.stop();\r\n    }\r\n  }\r\n\r\n  function error(rejection) {\r\n\r\n    try {\r\n      stopBlockUI(rejection.config);\r\n    } catch(ex) {\r\n      console.log('httpRequestError', ex);\r\n    }\r\n\r\n    return $q.reject(rejection);\r\n  }\r\n\r\n  return {\r\n    request: function(config) {\r\n\r\n      // Only block when autoBlock is enabled ...\r\n      // ... and the request doesn't match a cached template.\r\n\r\n      if (blockUIConfig.autoBlock &&\r\n        !(config.method == 'GET' && $templateCache.get(config.url))) {\r\n\r\n        // Don't block excluded requests\r\n\r\n        var result = blockUIConfig.requestFilter(config);\r\n\r\n        if (result === false) {\r\n          // Tag the config so we don't unblock this request\r\n          config.$_noBlock = true;\r\n        } else {\r\n\r\n          injectBlockUI();\r\n\r\n          config.$_blocks = blockUI.instances.locate(config);\r\n          config.$_blocks.start(result);\r\n        }\r\n      }\r\n\r\n      return config;\r\n    },\r\n\r\n    requestError: error,\r\n\r\n    response: function(response) {\r\n\r\n      // If the connection to the website goes down the response interceptor gets and error with \"cannot read property config of null\".\r\n      // https://github.com/McNull/angular-block-ui/issues/53\r\n\r\n      if(response) {\r\n        stopBlockUI(response.config);\r\n      }\r\n\r\n      return response;\r\n    },\r\n\r\n    responseError: error\r\n  };\r\n\r\n});\r\n","blkUI.factory('blockUI', function(blockUIConfig, $timeout, blockUIUtils, $document) {\r\n\r\n  var $body = $document.find('body');\r\n\r\n  function BlockUI(id) {\r\n\r\n    var self = this;\r\n\r\n    var state = {\r\n      id: id,\r\n      blockCount: 0,\r\n      message: blockUIConfig.message,\r\n      state: undefined,\r\n      blocking: false\r\n    }, startPromise, doneCallbacks = [];\r\n\r\n    this._id = id;\r\n\r\n    this._refs = 0;\r\n\r\n    this.start = function(message, data) {\r\n\r\n      if(state.blockCount > 0) {\r\n        message = message || state.message || blockUIConfig.message;\r\n      } else {\r\n        message = message || blockUIConfig.message;\r\n      }\r\n\r\n      state.message = message;\r\n      state.data = data;\r\n      state.blockCount++;\r\n\r\n      // Check if the focused element is part of the block scope\r\n\r\n      var $ae = angular.element($document[0].activeElement);\r\n\r\n      if($ae.length && blockUIUtils.isElementInBlockScope($ae, self)) {\r\n\r\n        // Let the active element lose focus and store a reference \r\n        // to restore focus when we're done (reset)\r\n\r\n        self._restoreFocus = $ae[0];\r\n\r\n        // https://github.com/McNull/angular-block-ui/issues/13\r\n        // http://stackoverflow.com/questions/22698058/apply-already-in-progress-error-when-using-typeahead-plugin-found-to-be-relate\r\n        // Queue the blur after any ng-blur expression.\r\n\r\n        $timeout(function() {\r\n          // Ensure we still need to blur\r\n          if(self._restoreFocus) {\r\n            self._restoreFocus.blur();\r\n          }\r\n        });\r\n      }\r\n\r\n      if (!startPromise) {\r\n        startPromise = $timeout(function() {\r\n          startPromise = null;\r\n          state.blocking = true;\r\n        }, blockUIConfig.delay);\r\n      }\r\n    };\r\n\r\n    this._cancelStartTimeout = function() {\r\n      if (startPromise) {\r\n        $timeout.cancel(startPromise);\r\n        startPromise = null;\r\n      }\r\n    };\r\n\r\n    this.stop = function() {\r\n      state.blockCount = Math.max(0, --state.blockCount);\r\n\r\n      if (state.blockCount === 0) {\r\n        self.reset(true);\r\n      }\r\n    };\r\n\r\n    this.isBlocking = function () {\r\n        return state.blocking;\r\n    };\r\n\r\n    this.message = function(value) {\r\n      state.message = value;\r\n    };\r\n\r\n    this.pattern = function(regexp) {\r\n      if (regexp !== undefined) {\r\n        self._pattern = regexp;\r\n      }\r\n\r\n      return self._pattern;\r\n    };\r\n\r\n    this.reset = function(executeCallbacks) {\r\n      \r\n      self._cancelStartTimeout();\r\n      state.blockCount = 0;\r\n      state.blocking = false;\r\n\r\n      // Restore the focus to the element that was active\r\n      // before the block start, but not if the user has \r\n      // focused something else while the block was active.\r\n\r\n      if(self._restoreFocus && \r\n         (!$document[0].activeElement || $document[0].activeElement === $body[0])) {\r\n        self._restoreFocus.focus();\r\n        self._restoreFocus = null;\r\n      }\r\n      \r\n      try {\r\n        if (executeCallbacks) {\r\n          angular.forEach(doneCallbacks, function(cb) {\r\n            cb();\r\n          });\r\n        }\r\n      } finally {\r\n        doneCallbacks.length = 0;\r\n      }\r\n    };\r\n\r\n    this.done = function(fn) {\r\n      doneCallbacks.push(fn);\r\n    };\r\n\r\n    this.state = function() {\r\n      return state;\r\n    };\r\n\r\n    this.addRef = function() {\r\n      self._refs += 1;\r\n    };\r\n\r\n    this.release = function() {\r\n      if(--self._refs <= 0) {\r\n        mainBlock.instances._destroy(self);\r\n      }\r\n    };\r\n  }\r\n\r\n  var instances = [];\r\n\r\n  instances.get = function(id) {\r\n\r\n    if(!isNaN(id)) {\r\n      throw new Error('BlockUI id cannot be a number');\r\n    }\r\n\r\n    var instance = instances[id];\r\n\r\n    if(!instance) {\r\n      // TODO: ensure no array instance trashing [xxx] -- current workaround: '_' + $scope.$id\r\n      instance = instances[id] = new BlockUI(id);\r\n      instances.push(instance);\r\n    }\r\n\r\n    return instance;\r\n  };\r\n\r\n  instances._destroy = function(idOrInstance) {\r\n    if (angular.isString(idOrInstance)) {\r\n      idOrInstance = instances[idOrInstance];\r\n    }\r\n\r\n    if (idOrInstance) {\r\n      idOrInstance.reset();\r\n\r\n      var i = blockUIUtils.indexOf(instances, idOrInstance);\r\n      instances.splice(i, 1);\r\n\r\n      delete instances[idOrInstance.state().id];\r\n    }\r\n  };\r\n  \r\n  instances.locate = function(request) {\r\n\r\n    var result = [];\r\n\r\n    // Add function wrappers that will be executed on every item\r\n    // in the array.\r\n    \r\n    blockUIUtils.forEachFnHook(result, 'start');\r\n    blockUIUtils.forEachFnHook(result, 'stop');\r\n\r\n    var i = instances.length;\r\n\r\n    while(i--) {\r\n      var instance = instances[i];\r\n      var pattern = instance._pattern;\r\n\r\n      if(pattern && pattern.test(request.url)) {\r\n        result.push(instance);\r\n      }\r\n    }\r\n\r\n    if(result.length === 0) {\r\n      result.push(mainBlock);\r\n    }\r\n\r\n    return result;\r\n  };\r\n\r\n  // Propagate the reset to all instances\r\n\r\n  blockUIUtils.forEachFnHook(instances, 'reset');\r\n\r\n  var mainBlock = instances.get('main');\r\n\r\n  mainBlock.addRef();\r\n  mainBlock.instances = instances;\r\n\r\n  return mainBlock;\r\n});\r\n","\r\nblkUI.factory('blockUIUtils', function() {\r\n\r\n  var $ = angular.element;\r\n\r\n  var utils = {\r\n    buildRegExp: function(pattern) {\r\n      var match = pattern.match(/^\\/(.*)\\/([gim]*)$/), regExp;\r\n\r\n      if(match) {\r\n        regExp = new RegExp(match[1], match[2]);\r\n      } else {\r\n        throw Error('Incorrect regular expression format: ' + pattern);\r\n      }\r\n\r\n      return regExp;\r\n    },\r\n    forEachFn: function(arr, fnName, args) {\r\n      var i = arr.length;\r\n      while(i--) {\r\n        var t = arr[i];\r\n        t[fnName].apply(t, args);\r\n      }\r\n    },\r\n    forEachFnHook: function(arr, fnName) {\r\n      arr[fnName] = function() {\r\n        utils.forEachFn(this, fnName, arguments);\r\n      }\r\n    },\r\n    isElementInBlockScope: function($element, blockScope) {\r\n      var c = $element.inheritedData('block-ui');\r\n\r\n      while(c) {\r\n        if(c === blockScope) {\r\n          return true;\r\n        }\r\n\r\n        c = c._parent;\r\n      }\r\n\r\n      return false;\r\n    },\r\n    findElement: function ($element, predicateFn, traverse) {\r\n      var ret = null;\r\n\r\n      if (predicateFn($element)) {\r\n        ret = $element;\r\n      } else {\r\n\r\n        var $elements;\r\n\r\n        if (traverse) {\r\n          $elements = $element.parent();\r\n        } else {\r\n          $elements = $element.children();\r\n        }\r\n\r\n        var i = $elements.length;\r\n        while (!ret && i--) {\r\n          ret = utils.findElement($($elements[i]), predicateFn, traverse);\r\n        }\r\n      }\r\n\r\n      return ret;\r\n    },\r\n    indexOf: function(arr, obj, start) {\r\n//      if(Array.prototype.indexOf) {\r\n//        return arr.indexOf(obj, start);\r\n//      }\r\n\r\n      for (var i = (start || 0), j = arr.length; i < j; i++) {\r\n        if (arr[i] === obj) {\r\n          return i;\r\n        }\r\n      }\r\n\r\n      return -1;\r\n    }\r\n  };\r\n\r\n  return utils;\r\n\r\n});","// Automatically generated.\n// This file is already embedded in your main javascript output, there's no need to include this file\n// manually in the index.html. This file is only here for your debugging pleasures.\nangular.module('blockUI').run(['$templateCache', function($templateCache){\n  $templateCache.put('angular-block-ui/angular-block-ui.ng.html', '<div class=\\\"block-ui-overlay\\\"></div><div class=\\\"block-ui-message-container\\\" aria-live=\\\"assertive\\\" aria-atomic=\\\"true\\\"><div class=\\\"block-ui-message\\\" ng-class=\\\"$_blockUiMessageClass\\\">{{ state.message }}</div></div>');\n}]);","})(angular);"],"sourceRoot":"../src/angular-block-ui"}